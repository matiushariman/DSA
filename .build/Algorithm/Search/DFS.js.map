{
  "version": 3,
  "sources": ["../../../Algorithm/Search/DFS.ts"],
  "sourcesContent": ["import { runFunctionWithEdges, } from '../../utils';\n\ntype MyNodeProps = {\n  left: MyNodeProps,\n  right: MyNodeProps,\n  value: number,\n} | null;\n\nconst MyNode = (value:number): MyNodeProps => ({\n  left: null,\n  right: null,\n  value,\n});\n\nconst BinarySearchTree = () => {\n  let root: MyNodeProps = null;\n\n  /** insert new node to tree **/\n  function insert(value: number) {\n    const newNode = MyNode(value);\n    \n    if (!root) {\n      root = newNode;\n    } else {\n      let currentNode = root;\n\n      while (currentNode) {\n        if (value < currentNode.value) {\n          if (!currentNode.left) {\n            currentNode.left = newNode;\n            break;\n          }\n  \n          currentNode = currentNode.left;\n        } else {\n          if (!currentNode.right) {\n            currentNode.right = newNode;\n            break;\n          }\n\n          currentNode = currentNode.right;\n        }\n      }\n    }\n  }\n\n  function inOrder(list: number[] = [], node: MyNodeProps = root) {\n\n    if (node) {\n      if (node.left) {\n        inOrder(list, node.left);\n      }\n      \n      list.push(node.value);\n\n      if (node.right) {\n        inOrder(list, node.right);\n      }\n    }\n    \n    return list;\n  }\n\n  return {\n    insert,\n    inOrder,\n  };\n};\n\nfunction main() {\n  const bst = BinarySearchTree();\n  bst.insert(9);\n  bst.insert(4);\n  bst.insert(6);\n  bst.insert(20);\n  bst.insert(170);\n  bst.insert(15);\n  bst.insert(1);\n  const inOrderList = bst.inOrder();\n  console.log('InOrder Traversal: ', inOrderList);\n}\n\nexport function runDFS() {\n  runFunctionWithEdges('DFS')(main);\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAAsC;AAQtC,MAAM,SAAS,CAAC,UAA+B;AAAA,EAC7C,MAAM;AAAA,EACN,OAAO;AAAA,EACP;AAAA;AAGF,MAAM,mBAAmB,MAAM;AAC7B,MAAI,OAAoB;AAGxB,kBAAgB,OAAe;AAC7B,UAAM,UAAU,OAAO;AAEvB,QAAI,CAAC,MAAM;AACT,aAAO;AAAA,WACF;AACL,UAAI,cAAc;AAElB,aAAO,aAAa;AAClB,YAAI,QAAQ,YAAY,OAAO;AAC7B,cAAI,CAAC,YAAY,MAAM;AACrB,wBAAY,OAAO;AACnB;AAAA;AAGF,wBAAc,YAAY;AAAA,eACrB;AACL,cAAI,CAAC,YAAY,OAAO;AACtB,wBAAY,QAAQ;AACpB;AAAA;AAGF,wBAAc,YAAY;AAAA;AAAA;AAAA;AAAA;AAMlC,mBAAiB,OAAiB,IAAI,OAAoB,MAAM;AAE9D,QAAI,MAAM;AACR,UAAI,KAAK,MAAM;AACb,gBAAQ,MAAM,KAAK;AAAA;AAGrB,WAAK,KAAK,KAAK;AAEf,UAAI,KAAK,OAAO;AACd,gBAAQ,MAAM,KAAK;AAAA;AAAA;AAIvB,WAAO;AAAA;AAGT,SAAO;AAAA,IACL;AAAA,IACA;AAAA;AAAA;AAIJ,gBAAgB;AACd,QAAM,MAAM;AACZ,MAAI,OAAO;AACX,MAAI,OAAO;AACX,MAAI,OAAO;AACX,MAAI,OAAO;AACX,MAAI,OAAO;AACX,MAAI,OAAO;AACX,MAAI,OAAO;AACX,QAAM,cAAc,IAAI;AACxB,UAAQ,IAAI,uBAAuB;AAAA;AAG9B,kBAAkB;AACvB,yCAAqB,OAAO;AAAA;",
  "names": []
}
