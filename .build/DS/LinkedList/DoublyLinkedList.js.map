{
  "version": 3,
  "sources": ["../../../DS/LinkedList/DoublyLinkedList.ts"],
  "sourcesContent": ["import { runFunctionWithEdges } from '../../utils';\n\ntype DoublyLinkedListNode = {\n  value: number;\n  next: DoublyLinkedListNode | null;\n  prev: DoublyLinkedListNode | null;\n};\n\nconst DoublyLinkedList = (value: number) => {\n  let head:DoublyLinkedListNode = {\n    value,\n    next: null,\n    prev: null,\n  };\n  let tail = head;\n  let length = 1;\n\n  function Node(value:number): DoublyLinkedListNode {\n    return {\n      value,\n      next: null,\n      prev: null,\n    };  \n  }\n\n    /** print nodes value **/\n  function printList():void {\n    const arrNodes: number[] = [];\n    let currentNode: DoublyLinkedListNode | null = head;\n    \n    while (currentNode !== null) {\n      arrNodes.push(currentNode.value);\n      currentNode = currentNode.next;\n    }\n    \n    console.log(arrNodes);\n  }\n  \n  /** add new value to the end of SinglyLinkedList **/\n  function append(value: number): void {\n    const newNode = Node(value);\n    newNode.prev = tail;\n    tail.next = newNode;\n    tail = newNode;\n    length++;\n\n    console.log(`After appending ${value}:`);\n    printList();\n  };\n\n  /** add new value to the start of SinglyLinkedList  **/\n  function prepend(value:number): void {\n    const newNode = Node(value);\n    head.prev = newNode;\n    newNode.next = head;\n    head = newNode;\n    length++;\n\n    console.log(`After prepending ${value}:`);\n    printList();\n  }\n\n  /** traverse to node of specific index **/\n  function traverseToIndex(index: number) {\n    let currentNode: DoublyLinkedListNode | null = head;\n    let counter = 0;\n\n    while (counter !== index && currentNode.next !== null) {\n      currentNode = currentNode.next;\n      counter++;\n    }\n\n    return currentNode;\n  }\n  \n  /** add new value to specific index in SinglyLinkedList **/\n  function insert(index: number, value: number): void {\n    if (index >= length) {\n      return append(value);\n    }\n\n    const newNode = Node(value);\n    const leader = traverseToIndex(index - 1);\n    const follower = leader.next;\n    leader.next = newNode;\n    newNode.prev = leader;\n    newNode.next = follower;\n\n    if (follower) {\n      follower.prev = newNode;\n    }\n    \n    length++;\n\n    console.log(`After inserting ${value} to index ${index}:`);\n    printList();\n  }\n\n  /** remove value from specific index **/\n  function remove(index: number) {\n    const leader = traverseToIndex(index - 1);\n    const unwantedNode = leader.next;\n    leader.next = unwantedNode ? unwantedNode.next : null;\n    \n    console.log(`After removing node at index ${index}:`);\n    printList();\n  }\n  \n  return {\n    append,\n    printList,\n    prepend,\n    insert,\n    remove,\n  };\n};\n\nfunction main() {\n  const myLinkedList = DoublyLinkedList(10);\n  // 10 -> 5\n  myLinkedList.append(5);\n  // 10 -> 5 -> 16\n  myLinkedList.append(16);\n  // 1 -> 10 -> 5 -> 16\n  myLinkedList.prepend(1);\n  // 1 -> 10 -> 99 -> 5 -> 16\n  myLinkedList.insert(2, 99);\n  myLinkedList.remove(2);\n}\n\nexport function runDoublyLinkedList() {\n  runFunctionWithEdges('Doubly Linked List')(main);\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAAqC;AAQrC,MAAM,mBAAmB,CAAC,UAAkB;AAC1C,MAAI,OAA4B;AAAA,IAC9B;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA;AAER,MAAI,OAAO;AACX,MAAI,SAAS;AAEb,gBAAc,QAAoC;AAChD,WAAO;AAAA,MACL;AAAA,MACA,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAKV,uBAA0B;AACxB,UAAM,WAAqB;AAC3B,QAAI,cAA2C;AAE/C,WAAO,gBAAgB,MAAM;AAC3B,eAAS,KAAK,YAAY;AAC1B,oBAAc,YAAY;AAAA;AAG5B,YAAQ,IAAI;AAAA;AAId,kBAAgB,QAAqB;AACnC,UAAM,UAAU,KAAK;AACrB,YAAQ,OAAO;AACf,SAAK,OAAO;AACZ,WAAO;AACP;AAEA,YAAQ,IAAI,mBAAmB;AAC/B;AAAA;AACD;AAGD,mBAAiB,QAAoB;AACnC,UAAM,UAAU,KAAK;AACrB,SAAK,OAAO;AACZ,YAAQ,OAAO;AACf,WAAO;AACP;AAEA,YAAQ,IAAI,oBAAoB;AAChC;AAAA;AAIF,2BAAyB,OAAe;AACtC,QAAI,cAA2C;AAC/C,QAAI,UAAU;AAEd,WAAO,YAAY,SAAS,YAAY,SAAS,MAAM;AACrD,oBAAc,YAAY;AAC1B;AAAA;AAGF,WAAO;AAAA;AAIT,kBAAgB,OAAe,QAAqB;AAClD,QAAI,SAAS,QAAQ;AACnB,aAAO,OAAO;AAAA;AAGhB,UAAM,UAAU,KAAK;AACrB,UAAM,SAAS,gBAAgB,QAAQ;AACvC,UAAM,WAAW,OAAO;AACxB,WAAO,OAAO;AACd,YAAQ,OAAO;AACf,YAAQ,OAAO;AAEf,QAAI,UAAU;AACZ,eAAS,OAAO;AAAA;AAGlB;AAEA,YAAQ,IAAI,mBAAmB,mBAAkB;AACjD;AAAA;AAIF,kBAAgB,OAAe;AAC7B,UAAM,SAAS,gBAAgB,QAAQ;AACvC,UAAM,eAAe,OAAO;AAC5B,WAAO,OAAO,eAAe,aAAa,OAAO;AAEjD,YAAQ,IAAI,gCAAgC;AAC5C;AAAA;AAGF,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAIJ,gBAAgB;AACd,QAAM,eAAe,iBAAiB;AAEtC,eAAa,OAAO;AAEpB,eAAa,OAAO;AAEpB,eAAa,QAAQ;AAErB,eAAa,OAAO,GAAG;AACvB,eAAa,OAAO;AAAA;AAGf,+BAA+B;AACpC,yCAAqB,sBAAsB;AAAA;",
  "names": []
}
