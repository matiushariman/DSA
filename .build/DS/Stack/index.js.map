{
  "version": 3,
  "sources": ["../../../DS/Stack/index.ts"],
  "sourcesContent": ["import { printStart, printEnd } from '../../utils';\n\ntype MyNodeProps = {\n  value: any,\n  next: MyNodeProps | null,\n} | null;\n\nconst MyNode = (value: any): MyNodeProps => ({ value, next: null });\n\nconst Stack = () => {\n  let top: MyNodeProps = null;\n  let bottom: MyNodeProps = null;\n  let length: number = 0;\n\n  /** return top of the stack **/\n  function peek(): MyNodeProps {\n    console.log(`Returning ${top}`);\n    return top;\n  }\n\n  /** push new value to the top of the stack **/\n  function push(value:any) {\n    const newNode = MyNode(value);\n\n    if (length === 0) {\n      top = newNode;\n      bottom = newNode;\n    } else {\n      const pointer = top;\n      top = newNode;\n\n      if (top) {\n        top.next = pointer;\n      }\n    }\n    length++;\n\n    console.log(`After pushing ${value}:`);\n    console.log(JSON.stringify(top));\n  }\n\n  \n  return {\n    peek,\n    push,\n  };\n};\n\nexport function runStack() {\n  const sectionName = 'STACK';\n  printStart(sectionName);\n  const stack = Stack();\n  stack.peek();\n  stack.push('hello');\n  stack.push('world');\n  printEnd(sectionName);\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAAqC;AAOrC,MAAM,SAAS,CAAC,UAA6B,GAAE,OAAO,MAAM;AAE5D,MAAM,QAAQ,MAAM;AAClB,MAAI,MAAmB;AACvB,MAAI,SAAsB;AAC1B,MAAI,SAAiB;AAGrB,kBAA6B;AAC3B,YAAQ,IAAI,aAAa;AACzB,WAAO;AAAA;AAIT,gBAAc,OAAW;AACvB,UAAM,UAAU,OAAO;AAEvB,QAAI,WAAW,GAAG;AAChB,YAAM;AACN,eAAS;AAAA,WACJ;AACL,YAAM,UAAU;AAChB,YAAM;AAEN,UAAI,KAAK;AACP,YAAI,OAAO;AAAA;AAAA;AAGf;AAEA,YAAQ,IAAI,iBAAiB;AAC7B,YAAQ,IAAI,KAAK,UAAU;AAAA;AAI7B,SAAO;AAAA,IACL;AAAA,IACA;AAAA;AAAA;AAIG,oBAAoB;AACzB,QAAM,cAAc;AACpB,+BAAW;AACX,QAAM,QAAQ;AACd,QAAM;AACN,QAAM,KAAK;AACX,QAAM,KAAK;AACX,6BAAS;AAAA;",
  "names": []
}
