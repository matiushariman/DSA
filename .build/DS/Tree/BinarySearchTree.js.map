{
  "version": 3,
  "sources": ["../../../DS/Tree/BinarySearchTree.ts"],
  "sourcesContent": ["import { runFunctionWithEdges } from '../../utils';\n\ntype MyNodeProps = {\n  left: MyNodeProps,\n  right: MyNodeProps,\n  value: number,\n} | null;\n\nconst MyNode = (value:number): MyNodeProps => ({\n  left: null,\n  right: null,\n  value,\n});\n\nexport const BinarySearchTree = () => {\n  let root: MyNodeProps = null;\n\n  /** insert new node to tree **/\n  function insert(value: number) {\n    const newNode = MyNode(value);\n    \n    if (!root) {\n      root = newNode;\n    } else {\n      let currentNode = root;\n\n      while (currentNode) {\n        if (value < currentNode.value) {\n          if (!currentNode.left) {\n            currentNode.left = newNode;\n            break;\n          }\n  \n          currentNode = currentNode.left;\n        } else {\n          if (!currentNode.right) {\n            currentNode.right = newNode;\n            break;\n          }\n\n          currentNode = currentNode.right;\n        }\n      }\n    }\n\n    console.log(`After inserting ${value}:`);\n    console.log(JSON.stringify(root, null, 2));\n  }\n\n  /** check if value exists **/\n  function lookup(value:number) {\n    if (!root) {\n      console.log('Tree is empty.');\n      return;\n    }\n\n    let currentNode: MyNodeProps | null = root;\n    \n    while (currentNode) {\n      if (value < currentNode.value) {\n        currentNode = currentNode.left;\n      } else if (value > currentNode.value) {\n        currentNode = currentNode.right;\n      } else if (value === currentNode.value) {\n        console.log(`Found value ${value} in the tree.`);\n        return;\n      }\n    }\n\n    console.log(`Value ${value} not found.`);\n  }\n  \n  return {\n    insert,\n    lookup,\n  };\n};\n\nfunction main() {\n  const bst = BinarySearchTree();\n  bst.insert(9);\n  bst.insert(4);\n  bst.insert(20);\n  bst.insert(1);\n  bst.lookup(2);\n  bst.lookup(20);\n}\n\nexport function runBinarySearchTree() {\n  runFunctionWithEdges('Binary Search Tree')(main);\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAqC;AAQrC,MAAM,SAAS,CAAC,UAA+B;AAAA,EAC7C,MAAM;AAAA,EACN,OAAO;AAAA,EACP;AAAA;AAGK,MAAM,mBAAmB,MAAM;AACpC,MAAI,OAAoB;AAGxB,kBAAgB,OAAe;AAC7B,UAAM,UAAU,OAAO;AAEvB,QAAI,CAAC,MAAM;AACT,aAAO;AAAA,WACF;AACL,UAAI,cAAc;AAElB,aAAO,aAAa;AAClB,YAAI,QAAQ,YAAY,OAAO;AAC7B,cAAI,CAAC,YAAY,MAAM;AACrB,wBAAY,OAAO;AACnB;AAAA;AAGF,wBAAc,YAAY;AAAA,eACrB;AACL,cAAI,CAAC,YAAY,OAAO;AACtB,wBAAY,QAAQ;AACpB;AAAA;AAGF,wBAAc,YAAY;AAAA;AAAA;AAAA;AAKhC,YAAQ,IAAI,mBAAmB;AAC/B,YAAQ,IAAI,KAAK,UAAU,MAAM,MAAM;AAAA;AAIzC,kBAAgB,OAAc;AAC5B,QAAI,CAAC,MAAM;AACT,cAAQ,IAAI;AACZ;AAAA;AAGF,QAAI,cAAkC;AAEtC,WAAO,aAAa;AAClB,UAAI,QAAQ,YAAY,OAAO;AAC7B,sBAAc,YAAY;AAAA,iBACjB,QAAQ,YAAY,OAAO;AACpC,sBAAc,YAAY;AAAA,iBACjB,UAAU,YAAY,OAAO;AACtC,gBAAQ,IAAI,eAAe;AAC3B;AAAA;AAAA;AAIJ,YAAQ,IAAI,SAAS;AAAA;AAGvB,SAAO;AAAA,IACL;AAAA,IACA;AAAA;AAAA;AAIJ,gBAAgB;AACd,QAAM,MAAM;AACZ,MAAI,OAAO;AACX,MAAI,OAAO;AACX,MAAI,OAAO;AACX,MAAI,OAAO;AACX,MAAI,OAAO;AACX,MAAI,OAAO;AAAA;AAGN,+BAA+B;AACpC,yCAAqB,sBAAsB;AAAA;",
  "names": []
}
